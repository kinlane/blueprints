openapi: "3.0.0"
info:
  title: "Actions"
  description: "This is of the actions API."
  version: "2022-03-05T04:04:29Z"
servers:
- url: 
paths:
  /actions:
    get:
      summary: Get Actions
      description: Gets all actions.         
      parameters:
      - name: "limit"
        in: "query"
        required: false
        schema:
          type: string        
      - name: "page"
        in: "query"
        required: false
        schema:
          type: string         
      responses:
        '200':
          description: 'All actions.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Actions'
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:007596076917:function:actions-staging-actions-get/invocations"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.querystring.limit: "method.request.querystring.limit"
        requestTemplates:
          application/json: "{\n    \"page\" : \"$input.params('page')\",\n    \"\
            limit\" : \"$input.params('limit')\"\n}"
        passthroughBehavior: "when_no_templates"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    post:
      summary: Add Action
      description: Adds a new action.    
      requestBody:
        description: Action
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Action"
      responses:
        '201':
          description: 'Single Action'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:007596076917:function:actions-staging-actions-post/invocations"
        responses:
          default:
            statusCode: "201"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
  /actions/{action_id}:
    get:
      parameters:
      - name: "action_id"
        in: "path"
        required: true
        schema:
          type: string  
      responses:
        '200':
          description: 'Single Action'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:007596076917:function:actions-staging-actions-action_id-get/invocations"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.action_id: "method.request.path.action_id"
        requestTemplates:
          application/json: "{\n    \"action_id\" : \"$input.params('action_id')\"\
            \n}"
        passthroughBehavior: "when_no_templates"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    put:
      parameters:
      - name: "action_id"
        in: "path"
        required: true
        schema:
          type: string  
      requestBody:
        description: Action
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Action"        
      responses:
        '204':
          description: 'All actions.'
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:007596076917:function:actions-staging-actions-action_id-put/invocations"
        responses:
          default:
            statusCode: "204"
        requestParameters:
          integration.request.path.action_id: "method.request.path.action_id"
        requestTemplates:
          application/json: "{\n    \"action_id\" : \"$input.params('action_id')\"\
            ,\n    \"body\" : $input.json('$') \n}"
        passthroughBehavior: "when_no_templates"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    delete:
      parameters:
      - name: "action_id"
        in: "path"
        required: true
        schema:
          type: string  
      responses:
        '204':
          description: 'All actions.'
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:007596076917:function:actions-staging-actions-action_id-delete/invocations"
        responses:
          default:
            statusCode: "204"
        requestParameters:
          integration.request.path.action_id: "method.request.path.action_id"
        requestTemplates:
          application/json: "{\n    \"action_id\" : \"$input.params('action_id')\"\
            \n}"
        passthroughBehavior: "when_no_templates"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
components:
  securitySchemes:
    api_key:
      type: apiKey
      name: "x-api-key"
      in: header
  schemas:
    Actions:
      type: array
      items:
        $ref: '#/components/schemas/Action'      
    Action:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        version:
          type: string          
        description:
          type: string
        collection_id:
          type: string
security:
  - api_key: []              